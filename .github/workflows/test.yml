name: Run Tests
on:
  pull_request:
jobs:
  test:
    name: Test with Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.3'
    - name: Check out code
      uses: actions/checkout@v4

    - name: Download ast-grep binary for tests
      run: |
        curl -L -o ast-grep.zip https://github.com/ast-grep/ast-grep/releases/latest/download/app-x86_64-unknown-linux-gnu.zip
        unzip -o ast-grep.zip
        # Move ast-grep binary to project root (alongside context-sherpa binary)
        mv ast-grep .
        # Verify ast-grep binary works
        if [ -f "ast-grep" ]; then
          ./ast-grep --version || (echo "ast-grep binary not working"; exit 1)
        fi
        rm ast-grep.zip

    - name: Install dependencies
      run: |
        go mod download

    - name: Verify build works
      run: |
        go build ./...
        go build -o context-sherpa ./cmd/context-sherpa

    - name: Test MCP server stdio communication
      run: |
        # Run the MCP server test script (shell-based, no extra dependencies needed)
        chmod +x test-mcp-server.sh
        ./test-mcp-server.sh

    - name: Test context-sherpa with ast-grep integration
      run: |
        echo "Testing context-sherpa binary with ast-grep..."
        # Run context-sherpa with ast-grep for 5 seconds then kill it
        timeout 5s ./context-sherpa --astGrepPath=./ast-grep > context-sherpa.log 2>&1 &
        SERVER_PID=$!
        # Wait for startup messages
        sleep 2
        # Kill the server
        kill $SERVER_PID 2>/dev/null || true
        # Check for expected startup messages
        if grep -q "Using ast-grep:" context-sherpa.log && grep -q "Starting MCP server..." context-sherpa.log; then
          echo "✅ context-sherpa started successfully with ast-grep"
        else
          echo "❌ context-sherpa did not start properly with ast-grep"
          echo "Server output:"
          cat context-sherpa.log
          exit 1
        fi

    - name: Run Unit tests
      run: |
        go test -race -covermode atomic -coverprofile=coverage.out -v ./...

    - name: Install goveralls
      run: go install github.com/mattn/goveralls@latest

    - name: Send coverage
      env:
        COVERALLS_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
      run: goveralls -coverprofile=coverage.out -service=github