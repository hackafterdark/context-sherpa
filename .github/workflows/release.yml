name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Download ast-grep binary for tests
        run: |
          curl -L -o ast-grep.zip https://github.com/ast-grep/ast-grep/releases/latest/download/app-x86_64-unknown-linux-gnu.zip
          unzip -o ast-grep.zip
          # Verify ast-grep binary works
          if [ -f "ast-grep" ]; then
            ./ast-grep --version || (echo "ast-grep binary not working"; exit 1)
          fi
          rm ast-grep.zip

      - name: Run tests
        run: go test ./...

      - name: Test context-sherpa with ast-grep integration
        run: |
          echo "Testing context-sherpa binary with ast-grep..."
          # Build context-sherpa binary first
          go build -o context-sherpa ./cmd/context-sherpa
          # Run context-sherpa with ast-grep for 5 seconds then kill it
          timeout 5s ./context-sherpa --astGrepPath=./ast-grep > context-sherpa.log 2>&1 &
          SERVER_PID=$!
          # Wait for startup messages
          sleep 2
          # Kill the server
          kill $SERVER_PID 2>/dev/null || true
          # Check for expected startup messages
          if grep -q "Using ast-grep:" context-sherpa.log && grep -q "Starting MCP server..." context-sherpa.log; then
            echo "✅ context-sherpa started successfully with ast-grep"
          else
            echo "❌ context-sherpa did not start properly with ast-grep"
            echo "Server output:"
            cat context-sherpa.log
            exit 1
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/

  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            ast_grep_asset: app-x86_64-unknown-linux-gnu.zip
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            ast_grep_asset: app-aarch64-unknown-linux-gnu.zip
          - os: macos-latest
            goos: darwin
            goarch: amd64
            ast_grep_asset: app-x86_64-apple-darwin.zip
          - os: macos-latest
            goos: darwin
            goarch: arm64
            ast_grep_asset: app-aarch64-apple-darwin.zip
          - os: windows-latest
            goos: windows
            goarch: amd64
            ast_grep_asset: app-x86_64-pc-windows-msvc.zip
          - os: windows-latest
            goos: windows
            goarch: arm64
            ast_grep_asset: app-aarch64-pc-windows-msvc.zip
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.os == 'windows-latest' && 'powershell' || 'bash' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Download ast-grep binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          echo "Matrix values: OS=${{ matrix.os }}, GOOS=${{ matrix.goos }}, GOARCH=${{ matrix.goarch }}, Asset=${{ matrix.ast_grep_asset }}"
          AST_GREP_URL="https://github.com/ast-grep/ast-grep/releases/latest/download/${{ matrix.ast_grep_asset }}"
          echo "Download URL: $AST_GREP_URL"
          curl -L -o ast-grep.zip "$AST_GREP_URL"
          unzip -o ast-grep.zip
          if [ -f "ast-grep" ]; then
            echo "ast-grep binary ready"
          else
            echo "Error: No ast-grep binary found after extraction"
            exit 1
          fi
          rm ast-grep.zip

      - name: Download ast-grep binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Matrix values: OS=${{ matrix.os }}, GOOS=${{ matrix.goos }}, GOARCH=${{ matrix.goarch }}, Asset=${{ matrix.ast_grep_asset }}"
          $AST_GREP_URL = "https://github.com/ast-grep/ast-grep/releases/latest/download/${{ matrix.ast_grep_asset }}"
          Write-Host "Download URL: $AST_GREP_URL"
          curl.exe -L -o ast-grep.zip $AST_GREP_URL
          # Use PowerShell's built-in extraction instead of 7z
          Expand-Archive -Path ast-grep.zip -DestinationPath ./temp_extract -Force
          $exeFile = Get-ChildItem -Path ./temp_extract -Recurse -Filter *.exe | Select-Object -First 1
          if ($exeFile) {
              # Copy the .exe file to project root (alongside context-sherpa.exe binary)
              Copy-Item -Path $exeFile.FullName -Destination "ast-grep.exe" -Force
              Write-Host "Copied $($exeFile.Name) to project root as ast-grep.exe"
          } else {
              Write-Host "Error: ast-grep.exe not found in the extracted archive."
              Write-Host "Contents of temp_extract:"
              Get-ChildItem -Path ./temp_extract -Recurse | ForEach-Object { Write-Host "  $($_.FullName)" }
              exit 1
          }
          Remove-Item -Recurse -Force ./temp_extract
          Remove-Item ast-grep.zip

      - name: Build binary
        env:
          VERSION: ${{ github.ref_name }}
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          echo "Building for OS: $GOOS, ARCH: $GOARCH, Version: $VERSION"
          ${{ matrix.goos == 'windows' && 'go build -ldflags "-X main.version=$env:VERSION -s -w" -o context-sherpa-$env:GOOS-$env:GOARCH.exe ./cmd/context-sherpa' || 'go build -ldflags "-X main.version=$VERSION -s -w" -o context-sherpa-$GOOS-$GOARCH ./cmd/context-sherpa' }}

      - name: Test context-sherpa with ast-grep integration (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          echo "Testing context-sherpa binary with ast-grep on ${{ matrix.os }}..."
          BINARY_NAME="context-sherpa-$GOOS-$GOARCH"
          echo "Binary name: $BINARY_NAME"
          # Run context-sherpa with ast-grep for 5 seconds then kill it
          timeout 5s ./$BINARY_NAME --astGrepPath=./ast-grep > context-sherpa.log 2>&1 &
          SERVER_PID=$!
          sleep 2
          kill $SERVER_PID 2>/dev/null || true
          # Check for expected startup messages
          if grep -q "Using ast-grep:" context-sherpa.log && grep -q "Starting MCP server..." context-sherpa.log; then
            echo "✅ context-sherpa started successfully with ast-grep"
          else
            echo "❌ context-sherpa did not start properly with ast-grep"
            echo "Server output:"
            cat context-sherpa.log
            exit 1
          fi

      - name: Test context-sherpa with ast-grep integration (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "Testing context-sherpa binary with ast-grep on ${{ matrix.os }}..."
          $BINARY_NAME = "context-sherpa-$env:GOOS-$env:GOARCH.exe"
          Write-Host "Binary name: $BINARY_NAME"
          # Run context-sherpa with ast-grep for 5 seconds then kill it
          $proc = Start-Process -FilePath $BINARY_NAME -ArgumentList "--astGrepPath=ast-grep.exe" -PassThru -RedirectStandardOutput context-sherpa.log -RedirectStandardError context-sherpa.log -NoNewWindow
          Start-Sleep -Seconds 3
          Stop-Process -Id $proc.Id -Force -ErrorAction SilentlyContinue
          # Check for expected startup messages
          if (Select-String -Path context-sherpa.log -Pattern "Using ast-grep:" -Quiet -And (Select-String -Path context-sherpa.log -Pattern "Starting MCP server..." -Quiet)) {
            Write-Host "✅ context-sherpa started successfully with ast-grep"
          } else {
            Write-Host "❌ context-sherpa did not start properly with ast-grep"
            Get-Content context-sherpa.log
            exit 1
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ${{ matrix.goos == 'windows' && 'context-sherpa-windows-*.exe' || 'context-sherpa-*' }}

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          path: binaries/
          merge-multiple: true

      - name: Generate checksums
        run: |
          cd binaries
          sha256sum context-sherpa-* > checksums.txt

      - name: Create release archive
        run: |
          tar -czf context-sherpa-${{ github.ref_name }}.tar.gz binaries/

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            binaries/context-sherpa-*
            binaries/checksums.txt
            context-sherpa-${{ github.ref_name }}.tar.gz
          generate_release_notes: true