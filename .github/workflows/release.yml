name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Download ast-grep binary for tests
        run: |
          curl -L -o ast-grep.zip https://github.com/ast-grep/ast-grep/releases/download/0.39.5/app-x86_64-unknown-linux-gnu.zip
          unzip -o ast-grep.zip -d cmd/server/bin/
          # Verify ast-grep binary works
          if [ -f "cmd/server/bin/ast-grep" ]; then
            ./cmd/server/bin/ast-grep --version || (echo "ast-grep binary not working"; exit 1)
          fi
          rm ast-grep.zip

      - name: Run tests
        run: go test ./...

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/

  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            ast_grep_asset: app-x86_64-unknown-linux-gnu.zip
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            ast_grep_asset: app-aarch64-unknown-linux-gnu.zip
          - os: macos-latest
            goos: darwin
            goarch: amd64
            ast_grep_asset: app-x86_64-apple-darwin.zip
          - os: macos-latest
            goos: darwin
            goarch: arm64
            ast_grep_asset: app-aarch64-apple-darwin.zip
          - os: windows-latest
            goos: windows
            goarch: amd64
            ast_grep_asset: app-x86_64-pc-windows-msvc.zip
          - os: windows-latest
            goos: windows
            goarch: arm64
            ast_grep_asset: app-aarch64-pc-windows-msvc.zip
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.os == 'windows-latest' && 'powershell' || 'bash' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Download ast-grep binary
        run: |
          AST_GREP_URL="https://github.com/ast-grep/ast-grep/releases/download/0.39.5/${{ matrix.ast_grep_asset }}"
          ${{ matrix.os == 'windows-latest' && '
            curl.exe -L -o ast-grep.zip "$AST_GREP_URL"
            7z x ast-grep.zip -ocmd/server/bin/
            if (Test-Path "cmd/server/bin/ast-grep.exe") {
              Write-Host "ast-grep.exe binary ready"
            } else {
              Write-Host "Error: No ast-grep binary found after extraction"
              exit 1
            }
            Remove-Item ast-grep.zip
          ' || '
            curl -L -o ast-grep.zip "$AST_GREP_URL"
            unzip -o ast-grep.zip -d cmd/server/bin/
            if [ -f "cmd/server/bin/ast-grep" ]; then
              echo "ast-grep binary ready"
            elif [ -f "cmd/server/bin/ast-grep.exe" ]; then
              echo "ast-grep.exe binary ready"
            else
              echo "Error: No ast-grep binary found after extraction"
              exit 1
            fi
            rm ast-grep.zip
          ' }}

      - name: Build binary
        env:
          VERSION: ${{ github.ref_name }}
        run: |
          ${{ matrix.goos == 'windows' && 'go build -ldflags "-X main.version=$env:VERSION -s -w" -o context-sherpa-${{ matrix.goos }}-${{ matrix.goarch }}.exe ./cmd/server' || 'go build -ldflags "-X main.version=$VERSION -s -w" -o context-sherpa-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/server' }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ${{ matrix.goos == 'windows' && 'context-sherpa-*.exe' || 'context-sherpa-*' }}

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          path: binaries/
          merge-multiple: true

      - name: Generate checksums
        run: |
          cd binaries
          sha256sum context-sherpa-* > checksums.txt

      - name: Create release archive
        run: |
          tar -czf context-sherpa-${{ github.ref_name }}.tar.gz binaries/

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            binaries/context-sherpa-*
            binaries/checksums.txt
            context-sherpa-${{ github.ref_name }}.tar.gz
          generate_release_notes: true